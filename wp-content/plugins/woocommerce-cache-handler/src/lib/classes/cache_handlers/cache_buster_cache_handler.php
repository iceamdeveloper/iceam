<?php
namespace Aelia\WC\Cache_Handler;
if(!defined('ABSPATH')) exit; // Exit if accessed directly

/**
 * Implements functions to allow to rendering of pricing elements via Ajax,
 * bypassing the limitation of static caching.
 *
 * @since 1.0.3.160602
 */
class Cache_Handler_Cache_Handler extends Base_Cache_Handler {
	/**
	 * The maximum length of the page hash calculated by the class.
	 *
	 * @var int
	 */
	const PAGE_HASH_MAX_LENGTH = 24;

	/**
	 * Indicates if amounts should be wrapped with an HTML tag to identify them
	 * after rendering and update them via Ajax.
	 *
	 * @var bool
	 */
	protected static $wrap_amounts = true;

	/**
	 * Keeps track of the HTML generated by shortcodes that will be updated via
	 * Ajax. It will be used as a simple identifier.
	 *
	 * @var int
	 */
	protected static $shortcode_counter = 0;

	/**
	 * Sets the hooks required by the class.
	 */
	protected function set_hooks() {
		parent::set_hooks();

		add_action('template_redirect', array($this, 'template_redirect'), 99);
	}

	/**
	 * Returns the Ajax callbacks introduced by this class.
	 *
	 * @return array
	 * @since 1.0.4.161003
	 */
	protected function get_handler_callbacks() {
		return array(
			'get_page_hash' => array($this, 'get_page_hash'),
		);
	}

	/**
	 * Adds the Ajax callbacks implemented by this class.
	 *
	 * @param array ajax_callbacks An array of ajax command => callback pairs.
	 * @return array The modified array of callbacks.
	 */
	public function wc_aelia_acb_ajax_callbacks($ajax_callbacks) {
		return array_merge($ajax_callbacks, $this->get_handler_callbacks());
	}

	/**
	 * Loads the settings that will be used by the frontend scripts.
	 *
	 * @param array frontend_script_params An array of parameters to be passed to
	 * the frontend JavaScript.
	 * @return array
	 */
	public function wc_aelia_cb_frontend_script_params($frontend_script_params) {
		$frontend_script_params = parent::wc_aelia_cb_frontend_script_params($frontend_script_params);

		$frontend_script_params['run_cache_buster'] = (bool)$this->should_run_cache_buster();
		$frontend_script_params['page_hash'] = isset($_GET[Definitions::ARG_PAGE_HASH]) ? wc_clean($_GET[Definitions::ARG_PAGE_HASH]) : '';

		return $frontend_script_params;
	}

	/**
	 * Registers and enqueues the frontend scripts used by this class.
	 */
	public function load_frontend_scripts() {
		wp_register_script(Cache_Handler::$plugin_slug . '-frontend-cache-buster',
												$this->url('plugin') . '/js/frontend/frontend-cache-buster.js',
												array('jquery', Cache_Handler::$plugin_slug . '-frontend'),
												null,
												true);
		wp_enqueue_script(Cache_Handler::$plugin_slug . '-frontend-cache-buster');
	}

	protected function should_run_cache_buster() {
		return apply_filters('wc_aelia_cb_should_run_cache_buster', empty($_POST) && !is_cart() && !is_checkout() && !is_account_page() &&
					 !is_ajax() && !is_customize_preview());
	}

	protected function get_page_hash_max_length() {
		$page_hash_max_length = apply_filters('wc_aelia_cb_page_hash_max_length', self::PAGE_HASH_MAX_LENGTH);
		// Safety mechanism, in case a 3rd party messes with the hash length and
		// returns something else than a number
		if(!is_numeric($page_hash_max_length)) {
			$page_hash_max_length = self::PAGE_HASH_MAX_LENGTH;
		}
		return $page_hash_max_length;
	}

	/**
	 * Returns customer's country.
	 *
	 * @param WC_Customer customer
	 * @return string
	 * @since 1.0.6.170520
	 */
	protected function get_customer_country($customer) {
		return $customer instanceof \WC_Customer ? $customer->get_billing_country() : WC()->countries->get_base_country();
	}

	/**
	 * Returns customer's State/Province.
	 *
	 * @param WC_Customer customer
	 * @return string
	 * @since 1.0.6.170520
	 */
	protected function get_customer_state($customer) {
		return $customer instanceof \WC_Customer ? $customer->get_billing_state() : WC()->countries->get_base_state();
	}

	public function get_page_hash() {
		$hash_data = array();

		// Store the active currency
		$hash_data[] = isset($_COOKIE['aelia_cs_selected_currency']) ? $_COOKIE['aelia_cs_selected_currency'] : get_woocommerce_currency();

		// Store customer's location
		$hash_data[] = isset($_COOKIE['aelia_customer_country']) ? $_COOKIE['aelia_customer_country'] : $this->get_customer_country(wc()->customer);
		$hash_data[] = isset($_COOKIE['aelia_customer_state']) ? $_COOKIE['aelia_customer_state'] : $this->get_customer_state(wc()->customer);

		// Store customer's tax exemption
		$hash_data[] = isset($_COOKIE['aelia_tax_exempt']) ? $_COOKIE['aelia_tax_exempt'] : false;

		// Allow 3rd parties to add more parameters
		$hash_data = apply_filters('wc_aelia_cb_page_hash', $hash_data);

		// Produce the hash for the page, using the stored parameters
		$page_hash = sha1(json_encode($hash_data));
		$page_hash = substr($page_hash, 0, $this->get_page_hash_max_length());

		return array(
			'result' => Definitions::RES_OK,
			'page_hash' => $page_hash,
		);
	}

	public function template_redirect() {
		if(!$this->should_run_cache_buster()) {
			return;
		}

		$current_page_hash = isset($_GET[Definitions::ARG_PAGE_HASH]) ? wc_clean($_GET[Definitions::ARG_PAGE_HASH]) : '';
		$page_hash = $this->get_page_hash();
		// The get_page_hash() method returns an array because it's used for Ajax
		// calls as well
		$page_hash = $page_hash['page_hash'];

		if($current_page_hash != $page_hash){
			global $wp;
			$redirect_url = trailingslashit(home_url($wp->request));

			// Add the original query string to the URL
			if(!empty($_SERVER['QUERY_STRING'])) {
				$redirect_url = add_query_arg($_SERVER['QUERY_STRING'], '', $redirect_url);
			}

			if(!get_option('permalink_structure')) {
				$redirect_url = add_query_arg($wp->query_string, '', $redirect_url);
			}

			// Replace the original page hash in the URL with the new one
			$redirect_url = add_query_arg(Definitions::ARG_PAGE_HASH, $page_hash, remove_query_arg(Definitions::ARG_PAGE_HASH, $redirect_url));

			wp_safe_redirect(esc_url_raw($redirect_url), 307);
			exit;
		}
	}
}

<?php
namespace Aelia\WC\Cache_Handler;
if(!defined('ABSPATH')) exit; // Exit if accessed directly

/**
 * Implements functions to allow to rendering of pricing elements via Ajax,
 * bypassing the limitation of static caching.
 *
 * @since 1.0.2.160601
 */
class Ajax_Loader_Cache_Handler extends Base_Cache_Handler {
	/**
	 * Indicates if amounts should be wrapped with an HTML tag to identify them
	 * after rendering and update them via Ajax.
	 *
	 * @var bool
	 */
	protected static $wrap_amounts = true;

	/**
	 * Keeps track of the HTML generated by shortcodes that will be updated via
	 * Ajax. It will be used as a simple identifier.
	 *
	 * @var int
	 */
	protected static $shortcode_counter = 0;

	/**
	 * Sets the hooks required by the class.
	 */
	protected function set_hooks() {
		parent::set_hooks();
		add_filter('woocommerce_get_price_html', array($this, 'woocommerce_get_price_html'), 50, 2);
		add_filter('wc_aelia_cs_shortcode_currency_amount', array($this, 'wc_aelia_cs_shortcode_currency_amount'), 50, 2);
	}

	/**
	 * Returns the Ajax callbacks introduced by this class.
	 *
	 * @return array
	 * @since 1.0.4.161003
	 */
	protected function get_handler_callbacks() {
		return array(
			'get_active_currency' => array($this, 'get_active_currency'),
			'get_product_prices_html' => array($this, 'get_product_prices_html'),
			'get_currency_amount_shortcodes_html' => array($this, 'get_currency_amount_shortcodes_html'),
			'convert_amounts' => array($this, 'convert_amounts'),
		);
	}

	/**
	 * Adds the Ajax callbacks implemented by this class.
	 *
	 * @param array ajax_callbacks An array of ajax command => callback pairs.
	 * @return array The modified array of callbacks.
	 */
	public function wc_aelia_acb_ajax_callbacks($ajax_callbacks) {
		return array_merge($ajax_callbacks, $this->get_handler_callbacks());
	}

	/**
	 * Returns a list with the enabled currencies.
	 *
	 * @return array
	 */
	protected function enabled_currencies() {
		return apply_filters('wc_aelia_cs_enabled_currencies', array(get_option('woocommerce_currency')));
	}

	/**
	 * Loads the settings that will be used by the frontend scripts.
	 *
	 * @param array frontend_script_params An array of parameters to be passed to
	 * the frontend JavaScript.
	 * @return array
	 */
	public function wc_aelia_cb_frontend_script_params($frontend_script_params) {
		$frontend_script_params = parent::wc_aelia_cb_frontend_script_params($frontend_script_params);

		// Add the script parameters required by this handler
		$frontend_script_params['currencies'] = array();
		foreach($this->enabled_currencies() as $currency) {
			$frontend_script_params['currencies'][$currency] = (object)array(
				'symbol' => get_woocommerce_currency_symbol($currency),
			);
		}
		return $frontend_script_params;
	}

	/**
	 * Registers and enqueues the frontend scripts used by this class.
	 */
	public function load_frontend_scripts() {
		wp_register_script(Cache_Handler::$plugin_slug . '-frontend-ajax-loader',
												$this->url('plugin') . '/js/frontend/frontend-ajax-loader.js',
												array('jquery', Cache_Handler::$plugin_slug . '-frontend'),
												null,
												true);
		wp_enqueue_script(Cache_Handler::$plugin_slug . '-frontend-ajax-loader');
	}

	/**
	 * Processes the HTML of product prices, eventually wrapping it in a <span>
	 * for later processing via Ajax.
	 *
	 * @param string price_html The original price HTML.
	 * @param WC_Product product The product to which the HTML refers.
	 * @return string The price HTML, eventually wrapped in a <span>.
	 */
	public function woocommerce_get_price_html($price_html, $product) {
		if(self::$wrap_amounts) {
			$price_html = '<span class="aelia_product_price" data-product_id="' . aelia_get_product_id($product) . '">' .
										$price_html .
										'</span>';
		}
		return $price_html;
	}

	/**
	 * Processes the HTML generated by the [aelia_shortcode_currency_amount]
	 * shortcode, eventually wrapping it in a <span> for later processing via Ajax.
	 *
	 * @param string shortcode_output The original output generated by the shortcode.
	 * @param array shortcode_args The arguments used to render the shortcode.
	 * @return string The output, eventually wrapped in a <span>.
	 * @since 1.0.1.160527
	 */
	public function wc_aelia_cs_shortcode_currency_amount($shortcode_output, $shortcode_args) {
		if(self::$wrap_amounts) {
			self::$shortcode_counter++;
			$shortcode_output = '<span class="aelia_shortcode_currency_amount" data-shortcode_id="' . self::$shortcode_counter . '" ' .
													'data-shortcode_args="' . htmlentities(json_encode($shortcode_args), ENT_QUOTES, 'UTF-8') . '">' .
													$shortcode_output .
													'</span>';
		}
		return $shortcode_output;
	}

	/**
	 * Ajax handler.
	 * Returns the active currency.
	 */
	public function get_active_currency() {
		return array(
			'result' => Definitions::RES_OK,
			'active_currency' => $this->get_selected_currency(),
		);
	}

	/**
	 * Ajax handler.
	 * Returns a list of product prices, converted to the active currency.
	 */
	public function get_product_prices_html() {
		self::$wrap_amounts = false;

		$product_prices_html = array();
		if(!empty($_REQUEST['product_ids']) && is_array($_REQUEST['product_ids'])) {
			foreach($_REQUEST['product_ids'] as $product_id) {
				$product = wc_get_product($product_id);
				// Skip invalid products
				// @since 1.0.11.191111
				if(!$product instanceof \WC_Product) {
					continue;
				}
				$product_prices_html[$product_id] = $product->get_price_html();
			}
		}

		return array(
			'result' => Definitions::RES_OK,
			'product_prices_html' => (object)$product_prices_html,
		);
	}

	/**
	 * Converts an array of key => value pairs into a string to be used with a
	 * shortcode.
	 *
	 * @param array shortcode_args An array of key => value pairs.
	 * @return string A string of arguments for a shortcode.
	 */
	protected function build_shortcode_args_text($shortcode_args) {
		$result = '';
		foreach($shortcode_args as $arg => $value) {
			$result.= $arg . '="' . (string)$value . '" ';
		}
		return $result;
	}

	/**
	 * Ajax handler.
	 * Returns the HTML for the [aelia_cs_currency_amount] shortcode.
	 */
	public function get_currency_amount_shortcodes_html() {
		self::$wrap_amounts = false;

		$shortcodes_html = array();
		if(!empty($_REQUEST['shortcodes']) && is_array($_REQUEST['shortcodes'])) {
			foreach($_REQUEST['shortcodes'] as $shortcode_id => $shortcode_args) {
				if(!is_array($shortcode_args)) {
					continue;
				}

				$shortcode_args_text = $this->build_shortcode_args_text($shortcode_args);
				$shortcodes_html[$shortcode_id] = do_shortcode('[aelia_cs_currency_amount ' . $shortcode_args_text . ']');
			}
		}
		return array(
			'result' => Definitions::RES_OK,
			'shortcodes_html' => (object)$shortcodes_html,
		);
	}

	/**
	 * Returns the base currency.
	 *
	 * @return string
	 * @since 1.0.2.160528
	 */
	protected function get_base_currency() {
		if(empty($this->base_currency)) {
			$this->base_currency = apply_filters('wc_aelia_cs_base_currency', get_option('woocommerce_currency'));
		}
		return $this->base_currency;
	}

	/**
	 * Returns the active currency.
	 *
	 * @return string
	 * @since 1.0.2.160528
	 */
	protected function get_selected_currency() {
		if(empty($this->selected_currency)) {
			$this->selected_currency = get_woocommerce_currency();
		}
		return $this->selected_currency;
	}

	/**
	 * Converts an amount from one currency to another.
	 *
	 * @param float amount The amount to convert.
	 * @param string from_currency The source currency. If empty, the base currency
	 * is taken.
	 * @param string to_currency The destination currency. If empty, the currently
	 * selected currency is taken.
	 * @return float The amount converted in the destination currency.
	 * @since 1.0.2.160528
	 */
	protected function convert($amount, $from_currency = null, $to_currency = null) {
		if(empty($from_currency)) {
			$from_currency = $this->get_base_currency();
		}

		if(empty($to_currency)) {
			$to_currency = $this->get_selected_currency();
		}

		return apply_filters('wc_aelia_cs_convert', $amount, $from_currency, $to_currency);
	}

	/**
	 * Ajax handler.
	 * Converts a list of amounts from the source currency to the active currency.
	 */
	public function convert_amounts() {
		$converted_amounts = array();
		if(!empty($_REQUEST['amounts']) && is_array($_REQUEST['amounts'])) {
			$from_currency = !empty($_REQUEST['from_currency']) ? $_REQUEST['from_currency'] : null;
			foreach($_REQUEST['amounts'] as $amount_id => $amount) {
				if(!is_numeric($amount)) {
					continue;
				}
				$converted_amounts[$amount_id] = $this->convert($amount, $from_currency);
			}
		}
		return array(
			'result' => Definitions::RES_OK,
			'converted_amounts' => (object)$converted_amounts,
			'source_currency' => $from_currency,
			'target_currency' => $this->get_selected_currency(),
		);
	}
}
